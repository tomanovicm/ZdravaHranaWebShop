// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZdravaHranaWebShop.Entities;

namespace ZdravaHranaWebShop.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220511140313_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8288438d-f28e-420f-b7f9-9e7bfcbe9e83",
                            ConcurrencyStamp = "9f7c9843-be7c-4add-885e-e114ba1dcb92",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "97768649-5fa5-4f0e-b9d0-ee0e5720cbc8",
                            ConcurrencyStamp = "ae72dc8c-ed0d-462e-a782-0bcb61daafe7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Adresa", b =>
                {
                    b.Property<Guid>("adresaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("broj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drzava")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("grad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postanskiBroj")
                        .HasColumnType("int");

                    b.Property<string>("ulica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("adresaID");

                    b.ToTable("Adresa");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Korpa", b =>
                {
                    b.Property<Guid>("korpaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("ukupnaCena")
                        .HasColumnType("int");

                    b.HasKey("korpaID");

                    b.HasIndex("Email");

                    b.ToTable("Korpa");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.NacinPlacanja", b =>
                {
                    b.Property<Guid>("nacinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nacin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nacinID");

                    b.ToTable("NacinPlacanja");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Porudzbina", b =>
                {
                    b.Property<Guid>("porudzbinaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("datumPorudzbine")
                        .HasColumnType("datetime2");

                    b.Property<int>("dodatniTroskovi")
                        .HasColumnType("int");

                    b.Property<Guid>("korpaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("nacinID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("nacinPlacanjanacinID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ukupanIznos")
                        .HasColumnType("int");

                    b.HasKey("porudzbinaID");

                    b.HasIndex("korpaID");

                    b.HasIndex("nacinPlacanjanacinID");

                    b.ToTable("Porudzbina");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Proizvod", b =>
                {
                    b.Property<Guid>("proizvodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("cena")
                        .HasColumnType("int");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("proizvodjacID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("rejting")
                        .HasColumnType("float");

                    b.Property<Guid>("tipProizID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("zalihe")
                        .HasColumnType("int");

                    b.HasKey("proizvodID");

                    b.HasIndex("proizvodjacID");

                    b.HasIndex("tipProizID");

                    b.ToTable("Proizvod");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Proizvodjac", b =>
                {
                    b.Property<Guid>("proizvodjacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nazivProizvodjaca")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("proizvodjacID");

                    b.ToTable("Proizvodjac");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.StavkaKorpe", b =>
                {
                    b.Property<Guid>("stavkaKorpeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("kolicina")
                        .HasColumnType("int");

                    b.Property<Guid>("korpaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("proizvodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("stavkaKorpeID");

                    b.HasIndex("korpaID");

                    b.HasIndex("proizvodID");

                    b.ToTable("StavkaKorpe");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.TipProizvoda", b =>
                {
                    b.Property<Guid>("tipProizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nazivTipa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tipProizID");

                    b.ToTable("TipProizvoda");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("adresaID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("adresaID");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Korpa", b =>
                {
                    b.HasOne("ZdravaHranaWebShop.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Email");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Porudzbina", b =>
                {
                    b.HasOne("ZdravaHranaWebShop.Entities.Korpa", "korpa")
                        .WithMany()
                        .HasForeignKey("korpaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaHranaWebShop.Entities.NacinPlacanja", "nacinPlacanja")
                        .WithMany("Porudzbine")
                        .HasForeignKey("nacinPlacanjanacinID");

                    b.Navigation("korpa");

                    b.Navigation("nacinPlacanja");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Proizvod", b =>
                {
                    b.HasOne("ZdravaHranaWebShop.Entities.Proizvodjac", "Proizvodjac")
                        .WithMany("Proizvodi")
                        .HasForeignKey("proizvodjacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaHranaWebShop.Entities.TipProizvoda", "TipProizvoda")
                        .WithMany("Proizvodi")
                        .HasForeignKey("tipProizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proizvodjac");

                    b.Navigation("TipProizvoda");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.StavkaKorpe", b =>
                {
                    b.HasOne("ZdravaHranaWebShop.Entities.Korpa", "Korpa")
                        .WithMany("StavkeKorpe")
                        .HasForeignKey("korpaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaHranaWebShop.Entities.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("proizvodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korpa");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.User", b =>
                {
                    b.HasOne("ZdravaHranaWebShop.Entities.Adresa", null)
                        .WithMany("Users")
                        .HasForeignKey("adresaID");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Adresa", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Korpa", b =>
                {
                    b.Navigation("StavkeKorpe");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.NacinPlacanja", b =>
                {
                    b.Navigation("Porudzbine");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.Proizvodjac", b =>
                {
                    b.Navigation("Proizvodi");
                });

            modelBuilder.Entity("ZdravaHranaWebShop.Entities.TipProizvoda", b =>
                {
                    b.Navigation("Proizvodi");
                });
#pragma warning restore 612, 618
        }
    }
}
